import HTTP from '../http/HTTP';
import { Language } from '../../resources/enums';
import { ClientConfig, ClientOptions } from '../../resources/structs';
import {
  AESKeysRequestParams, AESKeysResponseData, AllCosmeticsRequestParams, AllCosmeticsResponseData,
  BannerColorsRequestParams, BannerColorsResponseData, BannersRequestParams, BannersResponseData,
  BeanCosmeticsListRequestParams, BeanCosmeticsListResponseData, BRCosmeticByIDRequestParams,
  BRCosmeticByIDResponseData, BRCosmeticSearchRequestParams, BRCosmeticSearchResponseData,
  BRCosmeticsListRequestParams, BRCosmeticsListResponseData, BRCosmeticsSearchByIDsRequestParams,
  BRCosmeticsSearchByIDsResponseData, BRCosmeticsSearchRequestParams, BRCosmeticsSearchResponseData,
  BRMapRequestParams, BRMapResponseData, BRNewsRequestParams, BRNewsResponseData,
  BRStatsByAccountIDRequestParams, BRStatsByAccountIDResponseData, BRStatsRequestParams,
  BRStatsResponseData, CarCosmeticsListRequestParams, CarCosmeticsListResponseData,
  CreativeNewsRequestParams, CreativeNewsResponseData, CreatorCodeRequestParams,
  CreatorCodeResponseData, InstrumentCosmeticsListRequestParams, InstrumentCosmeticsListResponseData,
  LegoCosmeticsListRequestParams, LegoCosmeticsListResponseData, LegoKitCosmeticsListRequestParams,
  LegoKitCosmeticsListResponseData, NewCosmeticsRequestParams, NewCosmeticsResponseData,
  NewsRequestParams, NewsResponseData, PlaylistByIDRequestParams, PlaylistByIDResponseData,
  PlaylistsRequestParams, PlaylistsResponseData, ShopRequestParams, ShopResponseData,
  STWNewsRequestParams, STWNewsResponseData, TrackCosmeticsListRequestParams,
  TrackCosmeticsListResponseData,
} from '../http/autogeneratedEndpointStructs';

class Client {
  public http: HTTP;
  public config: ClientConfig;
  constructor(config?: ClientOptions) {
    this.config = {
      language: Language.English,
      rateLimitExtraTimeout: 0,
      ...config,
    };

    this.http = new HTTP(this);
  }

  /**
   * Returns the current aes key
   * @param options Options for this endpoint
   */
  public async aesKeys(options: AESKeysRequestParams): Promise<AESKeysResponseData> {
    return this.http.fetch('/v2/aes', options);
  }

  /**
   * Returns an array of all banners
   * @param options Options for this endpoint
   */
  public async banners(options: BannersRequestParams): Promise<BannersResponseData> {
    return this.http.fetch('/v1/banners', options);
  }

  /**
   * Returns an array of all banner colors
   * @param options Options for this endpoint
   */
  public async bannerColors(options: BannerColorsRequestParams): Promise<BannerColorsResponseData> {
    return this.http.fetch('/v1/banners/colors', options);
  }

  /**
   * Returns data of all cosmetics
   * @param options Options for this endpoint
   */
  public async allCosmetics(options: AllCosmeticsRequestParams): Promise<AllCosmeticsResponseData> {
    return this.http.fetch('/v2/cosmetics', options);
  }

  /**
   * Returns data of the latest added cosmetics
   * @param options Options for this endpoint
   */
  public async newCosmetics(options: NewCosmeticsRequestParams): Promise<NewCosmeticsResponseData> {
    return this.http.fetch('/v2/cosmetics/new', options);
  }

  /**
   * Returns data of all battle royale cosmetics
   * @param options Options for this endpoint
   */
  public async brCosmeticsList(options: BRCosmeticsListRequestParams): Promise<BRCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/br', options);
  }

  /**
   * Returns data of all track cosmetics
   * @param options Options for this endpoint
   */
  public async trackCosmeticsList(options: TrackCosmeticsListRequestParams): Promise<TrackCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/tracks', options);
  }

  /**
   * Returns data of all instrument cosmetics
   * @param options Options for this endpoint
   */
  public async instrumentCosmeticsList(options: InstrumentCosmeticsListRequestParams): Promise<InstrumentCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/instruments', options);
  }

  /**
   * Returns data of all car cosmetics
   * @param options Options for this endpoint
   */
  public async carCosmeticsList(options: CarCosmeticsListRequestParams): Promise<CarCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/cars', options);
  }

  /**
   * Returns data of all lego cosmetics
   * @param options Options for this endpoint
   */
  public async legoCosmeticsList(options: LegoCosmeticsListRequestParams): Promise<LegoCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/lego', options);
  }

  /**
   * Returns data of all lego kit cosmetics
   * @param options Options for this endpoint
   */
  public async legoKitCosmeticsList(options: LegoKitCosmeticsListRequestParams): Promise<LegoKitCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/lego/kits', options);
  }

  /**
   * Returns data of all bean aka fall guys cosmetics
   * @param options Options for this endpoint
   */
  public async beanCosmeticsList(options: BeanCosmeticsListRequestParams): Promise<BeanCosmeticsListResponseData> {
    return this.http.fetch('/v2/cosmetics/beans', options);
  }

  /**
   * Returns data of the requested battle royale cosmetic-id
   * @param options Options for this endpoint
   */
  public async brCosmeticByID(cosmeticId: string, options: BRCosmeticByIDRequestParams): Promise<BRCosmeticByIDResponseData> {
    return this.http.fetch(`/v2/cosmetics/br/${cosmeticId}`, options);
  }

  /**
   * Returns data of the first battle royale cosmetic which matches the search parameter(s)
   * @param options Options for this endpoint
   */
  public async brCosmeticSearch(options: BRCosmeticSearchRequestParams): Promise<BRCosmeticSearchResponseData> {
    return this.http.fetch('/v2/cosmetics/br/search', options);
  }

  /**
   * Returns an array of all battle royale cosmetics which match the search parameter(s)
   * @param options Options for this endpoint
   */
  public async brCosmeticsSearch(options: BRCosmeticsSearchRequestParams): Promise<BRCosmeticsSearchResponseData> {
    return this.http.fetch('/v2/cosmetics/br/search/all', options);
  }

  /**
   * Returns an array of the requested battle royale cosmetic ids
   * @param options Options for this endpoint
   */
  public async brCosmeticsSearchByIDs(options: BRCosmeticsSearchByIDsRequestParams): Promise<BRCosmeticsSearchByIDsResponseData> {
    return this.http.fetch('/v2/cosmetics/br/search/ids', options);
  }

  /**
   * Returns data of a creator code by its name
   * @param options Options for this endpoint
   */
  public async creatorCode(options: CreatorCodeRequestParams): Promise<CreatorCodeResponseData> {
    return this.http.fetch('/v2/creatorcode', options);
  }

  /**
   * Returns data & images of the BR map & POIs
   * @param options Options for this endpoint
   */
  public async brMap(options: BRMapRequestParams): Promise<BRMapResponseData> {
    return this.http.fetch('/v1/map', options);
  }

  /**
   * Returns data of the current battle royale, save the world & creative news
   * @param options Options for this endpoint
   */
  public async news(options: NewsRequestParams): Promise<NewsResponseData> {
    return this.http.fetch('/v2/news', options);
  }

  /**
   * Returns data of the current battle royale news
   * @param options Options for this endpoint
   */
  public async brNews(options: BRNewsRequestParams): Promise<BRNewsResponseData> {
    return this.http.fetch('/v2/news/br', options);
  }

  /**
   * Returns data of the current save the world news
   * @param options Options for this endpoint
   */
  public async stwNews(options: STWNewsRequestParams): Promise<STWNewsResponseData> {
    return this.http.fetch('/v2/news/stw', options);
  }

  /**
   * Returns data of the current creative news
   * @param options Options for this endpoint
   */
  public async creativeNews(options: CreativeNewsRequestParams): Promise<CreativeNewsResponseData> {
    return this.http.fetch('/v2/news/creative', options);
  }

  /**
   * Returns an array of all playlists
   * @param options Options for this endpoint
   */
  public async playlists(options: PlaylistsRequestParams): Promise<PlaylistsResponseData> {
    return this.http.fetch('/v1/playlists', options);
  }

  /**
   * Returns data of the requested playlist-id
   * @param options Options for this endpoint
   */
  public async playlistByID(playlistId: string, options: PlaylistByIDRequestParams): Promise<PlaylistByIDResponseData> {
    return this.http.fetch(`/v1/playlists/${playlistId}`, options);
  }

  /**
   * Returns data of the current shop
   * @param options Options for this endpoint
   */
  public async shop(options: ShopRequestParams): Promise<ShopResponseData> {
    return this.http.fetch('/v2/shop', options);
  }

  /**
   * Returns stats of the requested player account
   * Note: trios stats will always be null
   * @param options Options for this endpoint
   */
  public async brStats(options: BRStatsRequestParams): Promise<BRStatsResponseData> {
    return this.http.fetchStats('/v2/stats/br/v2', options);
  }

  /**
   * Returns stats of the requested player account
   * Note: trios stats will always be null
   * @param options Options for this endpoint
   */
  public async brStatsByAccountID(accountId: string, options: BRStatsByAccountIDRequestParams): Promise<BRStatsByAccountIDResponseData> {
    return this.http.fetchStats(`/v2/stats/br/v2/${accountId}`, options);
  }
}

export default Client;
